

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Mar 15 13:00:56 2025

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F721
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26     0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F721 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0000                     	;# 
    62     0001                     	;# 
    63     0002                     	;# 
    64     0003                     	;# 
    65     0004                     	;# 
    66     0005                     	;# 
    67     0006                     	;# 
    68     0007                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     0018                     	;# 
    85     0019                     	;# 
    86     001A                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     008C                     	;# 
    94     008E                     	;# 
    95     008F                     	;# 
    96     0090                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0093                     	;# 
   101     0094                     	;# 
   102     0095                     	;# 
   103     0096                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009D                     	;# 
   107     009F                     	;# 
   108     010C                     	;# 
   109     010D                     	;# 
   110     010E                     	;# 
   111     010F                     	;# 
   112     0115                     	;# 
   113     0116                     	;# 
   114     0185                     	;# 
   115     0186                     	;# 
   116     0187                     	;# 
   117     018C                     	;# 
   118     018D                     	;# 
   119     0019                     _TXREG	set	25
   120     0018                     _RCSTAbits	set	24
   121     001E                     _ADRES	set	30
   122     001F                     _ADCON0	set	31
   123     00F9                     _GO_nDONE	set	249
   124     0099                     _SPBRG	set	153
   125     0098                     _TXSTAbits	set	152
   126     009F                     _ADCON1	set	159
   127                           
   128                           	psect	strings
   129     0002                     __pstrings:
   130     0002                     stringtab:
   131     0002                     __stringtab:
   132     0002                     stringcode:	
   133                           ;	String table - string pointers are 1 byte each
   134                           
   135     0002                     stringdir:
   136     0002  3000               	movlw	high stringdir
   137     0003  008A               	movwf	10
   138     0004  0804               	movf	4,w
   139     0005  0A84               	incf	4,f
   140     0006  0782               	addwf	2,f
   141     0007                     __stringbase:
   142     0007  3400               	retlw	0
   143     0008                     __end_of__stringtab:
   144     0008                     STR_1:
   145     0008  3441               	retlw	65	;'A'
   146     0009  3444               	retlw	68	;'D'
   147     000A  3443               	retlw	67	;'C'
   148     000B  3431               	retlw	49	;'1'
   149     000C  343A               	retlw	58	;':'
   150     000D  3420               	retlw	32	;' '
   151     000E  3425               	retlw	37	;'%'
   152     000F  3475               	retlw	117	;'u'
   153     0010  342C               	retlw	44	;','
   154     0011  3420               	retlw	32	;' '
   155     0012  3441               	retlw	65	;'A'
   156     0013  3444               	retlw	68	;'D'
   157     0014  3443               	retlw	67	;'C'
   158     0015  3432               	retlw	50	;'2'
   159     0016  343A               	retlw	58	;':'
   160     0017  3420               	retlw	32	;' '
   161     0018  3425               	retlw	37	;'%'
   162     0019  3475               	retlw	117	;'u'
   163     001A  340D               	retlw	13
   164     001B  340A               	retlw	10
   165     001C  3400               	retlw	0
   166                           
   167                           	psect	cinit
   168     07F6                     start_initialization:	
   169                           ; #config settings
   170                           
   171     07F6                     __initialization:
   172                           
   173                           ; Clear objects allocated to BANK0
   174     07F6  1383               	bcf	3,7	;select IRP bank0
   175     07F7  3020               	movlw	low __pbssBANK0
   176     07F8  0084               	movwf	4
   177     07F9  3045               	movlw	low (__pbssBANK0+37)
   178     07FA  118A  257D  118A   	fcall	clear_ram0
   179     07FD                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182     07FD                     __end_of__initialization:
   183     07FD  0183               	clrf	3
   184     07FE  118A  2E99         	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	bssBANK0
   187     0020                     __pbssBANK0:
   188     0020                     _dbuf:
   189     0020                     	ds	32
   190     0040                     _width:
   191     0040                     	ds	2
   192     0042                     _prec:
   193     0042                     	ds	2
   194     0044                     _flags:
   195     0044                     	ds	1
   196                           
   197                           	psect	clrtext
   198     057D                     clear_ram0:	
   199                           ;	Called with FSR containing the base address, and
   200                           ;	W with the last address+1
   201                           
   202     057D  0064               	clrwdt	;clear the watchdog before getting into this loop
   203     057E                     clrloop0:
   204     057E  0180               	clrf	0	;clear RAM location pointed to by FSR
   205     057F  0A84               	incf	4,f	;increment pointer
   206     0580  0604               	xorwf	4,w	;XOR with final address
   207     0581  1903               	btfsc	3,2	;have we reached the end yet?
   208     0582  3400               	retlw	0	;all done for this memory range, return
   209     0583  0604               	xorwf	4,w	;XOR again to restore value
   210     0584  2D7E               	goto	clrloop0	;do the next byte
   211                           
   212                           	psect	cstackBANK1
   213     00A0                     __pcstackBANK1:
   214     00A0                     main@buffer:
   215                           
   216                           ; 50 bytes @ 0x0
   217     00A0                     	ds	50
   218     00D2                     main@adcValue1:
   219                           
   220                           ; 2 bytes @ 0x32
   221     00D2                     	ds	2
   222     00D4                     main@adcValue2:
   223                           
   224                           ; 2 bytes @ 0x34
   225     00D4                     	ds	2
   226                           
   227                           	psect	cstackCOMMON
   228     0070                     __pcstackCOMMON:
   229     0070                     ?_initADC:
   230     0070                     ??_initADC:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0070                     ?_initUART:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     ??_initUART:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0070                     ?_UARTSendString:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ?_putch:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ??_putch:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_main:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_UARTSendChar:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ??_UARTSendChar:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_readADC:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_fputc:	
   261                           ; 2 bytes @ 0x0
   262                           
   263     0070                     ?___lwdiv:	
   264                           ; 2 bytes @ 0x0
   265                           
   266     0070                     ?___lwmod:	
   267                           ; 2 bytes @ 0x0
   268                           
   269     0070                     UARTSendChar@data:	
   270                           ; 2 bytes @ 0x0
   271                           
   272     0070                     putch@c:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ___lwdiv@divisor:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ___lwmod@divisor:	
   279                           ; 2 bytes @ 0x0
   280                           
   281     0070                     fputc@c:	
   282                           ; 2 bytes @ 0x0
   283                           
   284                           
   285                           ; 2 bytes @ 0x0
   286     0070                     	ds	1
   287     0071                     ??_UARTSendString:
   288                           
   289                           ; 1 bytes @ 0x1
   290     0071                     	ds	1
   291     0072                     ??_readADC:
   292     0072                     UARTSendString@str:	
   293                           ; 1 bytes @ 0x2
   294                           
   295     0072                     fputc@fp:	
   296                           ; 1 bytes @ 0x2
   297                           
   298     0072                     ___lwdiv@dividend:	
   299                           ; 1 bytes @ 0x2
   300                           
   301     0072                     ___lwmod@dividend:	
   302                           ; 2 bytes @ 0x2
   303                           
   304                           
   305                           ; 2 bytes @ 0x2
   306     0072                     	ds	1
   307     0073                     ??_fputc:
   308                           
   309                           ; 1 bytes @ 0x3
   310     0073                     	ds	1
   311     0074                     ??___lwdiv:
   312     0074                     ??___lwmod:	
   313                           ; 1 bytes @ 0x4
   314                           
   315     0074                     readADC@channel:	
   316                           ; 1 bytes @ 0x4
   317                           
   318                           
   319                           ; 1 bytes @ 0x4
   320     0074                     	ds	1
   321     0075                     ___lwmod@counter:
   322     0075                     ___lwdiv@quotient:	
   323                           ; 1 bytes @ 0x5
   324                           
   325                           
   326                           ; 2 bytes @ 0x5
   327     0075                     	ds	2
   328     0077                     ___lwdiv@counter:
   329                           
   330                           ; 1 bytes @ 0x7
   331     0077                     	ds	1
   332     0078                     ?_vfpfcnvrt:
   333     0078                     vfpfcnvrt@fmt:	
   334                           ; 1 bytes @ 0x8
   335                           
   336                           
   337                           ; 1 bytes @ 0x8
   338     0078                     	ds	1
   339     0079                     vfpfcnvrt@ap:
   340                           
   341                           ; 1 bytes @ 0x9
   342     0079                     	ds	1
   343     007A                     ??_vfpfcnvrt:
   344                           
   345                           ; 1 bytes @ 0xA
   346     007A                     	ds	2
   347     007C                     ?_vfprintf:
   348     007C                     vfprintf@fmt:	
   349                           ; 2 bytes @ 0xC
   350                           
   351                           
   352                           ; 1 bytes @ 0xC
   353     007C                     	ds	1
   354     007D                     vfprintf@ap:
   355                           
   356                           ; 1 bytes @ 0xD
   357     007D                     	ds	1
   358     007E                     ??_vfprintf:
   359                           
   360                           	psect	cstackBANK0
   361     0045                     __pcstackBANK0:	
   362                           ; 1 bytes @ 0xE
   363                           
   364     0045                     vfpfcnvrt@fp:
   365                           
   366                           ; 1 bytes @ 0x0
   367     0045                     	ds	1
   368     0046                     vfpfcnvrt@convarg:
   369                           
   370                           ; 4 bytes @ 0x1
   371     0046                     	ds	4
   372     004A                     vfpfcnvrt@cp:
   373                           
   374                           ; 1 bytes @ 0x5
   375     004A                     	ds	1
   376     004B                     vfpfcnvrt@c:
   377                           
   378                           ; 1 bytes @ 0x6
   379     004B                     	ds	1
   380     004C                     vfprintf@fp:
   381                           
   382                           ; 1 bytes @ 0x7
   383     004C                     	ds	1
   384     004D                     vfprintf@cfmt:
   385                           
   386                           ; 1 bytes @ 0x8
   387     004D                     	ds	1
   388     004E                     ?_sprintf:
   389     004E                     sprintf@fmt:	
   390                           ; 2 bytes @ 0x9
   391                           
   392                           
   393                           ; 1 bytes @ 0x9
   394     004E                     	ds	5
   395     0053                     ??_sprintf:
   396                           
   397                           ; 1 bytes @ 0xE
   398     0053                     	ds	1
   399     0054                     sprintf@ap:
   400                           
   401                           ; 1 bytes @ 0xF
   402     0054                     	ds	1
   403     0055                     sprintf@s:
   404                           
   405                           ; 1 bytes @ 0x10
   406     0055                     	ds	1
   407     0056                     sprintf@f:
   408                           
   409                           ; 11 bytes @ 0x11
   410     0056                     	ds	11
   411     0061                     ??_main:
   412                           
   413                           ; 1 bytes @ 0x1C
   414     0061                     	ds	3
   415                           
   416                           	psect	maintext
   417     0699                     __pmaintext:	
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 48 in file "WH_main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  buffer         50    0[BANK1 ] unsigned char [50]
   428 ;;  adcValue2       2   52[BANK1 ] unsigned int 
   429 ;;  adcValue1       2   50[BANK1 ] unsigned int 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : B00/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   439 ;;      Params:         0       0       0       0
   440 ;;      Locals:         0       0      54       0
   441 ;;      Temps:          0       3       0       0
   442 ;;      Totals:         0       3      54       0
   443 ;;Total ram usage:       57 bytes
   444 ;; Hardware stack levels required when called: 5
   445 ;; This function calls:
   446 ;;		_UARTSendString
   447 ;;		_initADC
   448 ;;		_initUART
   449 ;;		_readADC
   450 ;;		_sprintf
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456     0699                     _main:	
   457                           ;psect for function _main
   458                           
   459     0699                     l920:	
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   462                           
   463                           
   464                           ;WH_main.c: 50:     initADC();
   465     0699  118A  2585  118A   	fcall	_initADC
   466                           
   467                           ;WH_main.c: 51:     initUART();
   468     069C  118A  258E  118A   	fcall	_initUART
   469     069F                     l33:	
   470                           ;WH_main.c: 53:     while (1) {
   471                           
   472                           
   473                           ;WH_main.c: 54:         unsigned int adcValue1 = readADC(0);
   474     069F  3000               	movlw	0
   475     06A0  118A  25F4  118A   	fcall	_readADC
   476     06A3  0871               	movf	?_readADC+1,w
   477     06A4  1683               	bsf	3,5	;RP0=1, select bank1
   478     06A5  1303               	bcf	3,6	;RP1=0, select bank1
   479     06A6  00D3               	movwf	(main@adcValue1+1)^(0+128)
   480     06A7  0870               	movf	?_readADC,w
   481     06A8  00D2               	movwf	main@adcValue1^(0+128)
   482                           
   483                           ;WH_main.c: 55:         unsigned int adcValue2 = readADC(1);
   484     06A9  3001               	movlw	1
   485     06AA  118A  25F4  118A   	fcall	_readADC
   486     06AD  0871               	movf	?_readADC+1,w
   487     06AE  1683               	bsf	3,5	;RP0=1, select bank1
   488     06AF  1303               	bcf	3,6	;RP1=0, select bank1
   489     06B0  00D5               	movwf	(main@adcValue2+1)^(0+128)
   490     06B1  0870               	movf	?_readADC,w
   491     06B2  00D4               	movwf	main@adcValue2^(0+128)
   492     06B3                     l922:
   493                           
   494                           ;WH_main.c: 58:         char buffer[50];;WH_main.c: 59:         sprintf(buffer, "ADC1: %
      +                          u, ADC2: %u\r\n", adcValue1, adcValue2);
   495     06B3  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   496     06B4  1283               	bcf	3,5	;RP0=0, select bank0
   497     06B5  1303               	bcf	3,6	;RP1=0, select bank0
   498     06B6  00CE               	movwf	sprintf@fmt
   499     06B7  1683               	bsf	3,5	;RP0=1, select bank1
   500     06B8  1303               	bcf	3,6	;RP1=0, select bank1
   501     06B9  0853               	movf	(main@adcValue1+1)^(0+128),w
   502     06BA  1283               	bcf	3,5	;RP0=0, select bank0
   503     06BB  1303               	bcf	3,6	;RP1=0, select bank0
   504     06BC  00D0               	movwf	?_sprintf+2
   505     06BD  1683               	bsf	3,5	;RP0=1, select bank1
   506     06BE  1303               	bcf	3,6	;RP1=0, select bank1
   507     06BF  0852               	movf	main@adcValue1^(0+128),w
   508     06C0  1283               	bcf	3,5	;RP0=0, select bank0
   509     06C1  1303               	bcf	3,6	;RP1=0, select bank0
   510     06C2  00CF               	movwf	?_sprintf+1
   511     06C3  1683               	bsf	3,5	;RP0=1, select bank1
   512     06C4  1303               	bcf	3,6	;RP1=0, select bank1
   513     06C5  0855               	movf	(main@adcValue2+1)^(0+128),w
   514     06C6  1283               	bcf	3,5	;RP0=0, select bank0
   515     06C7  1303               	bcf	3,6	;RP1=0, select bank0
   516     06C8  00D2               	movwf	?_sprintf+4
   517     06C9  1683               	bsf	3,5	;RP0=1, select bank1
   518     06CA  1303               	bcf	3,6	;RP1=0, select bank1
   519     06CB  0854               	movf	main@adcValue2^(0+128),w
   520     06CC  1283               	bcf	3,5	;RP0=0, select bank0
   521     06CD  1303               	bcf	3,6	;RP1=0, select bank0
   522     06CE  00D1               	movwf	?_sprintf+3
   523     06CF  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   524     06D0  118A  25D7  118A   	fcall	_sprintf
   525     06D3                     l924:
   526                           
   527                           ;WH_main.c: 62:         UARTSendString(buffer);
   528     06D3  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   529     06D4  118A  25A5  118A   	fcall	_UARTSendString
   530     06D7                     l926:
   531                           
   532                           ;WH_main.c: 65:         _delay((unsigned long)((100)*(16000000/4000.0)));
   533     06D7  3003               	movlw	3
   534     06D8  1283               	bcf	3,5	;RP0=0, select bank0
   535     06D9  1303               	bcf	3,6	;RP1=0, select bank0
   536     06DA  00E3               	movwf	??_main+2
   537     06DB  3008               	movlw	8
   538     06DC  00E2               	movwf	??_main+1
   539     06DD  3076               	movlw	118
   540     06DE  00E1               	movwf	??_main
   541     06DF                     u557:
   542     06DF  0BE1               	decfsz	??_main,f
   543     06E0  2EDF               	goto	u557
   544     06E1  0BE2               	decfsz	??_main+1,f
   545     06E2  2EDF               	goto	u557
   546     06E3  0BE3               	decfsz	??_main+2,f
   547     06E4  2EDF               	goto	u557
   548     06E5  2EE6               	nop2
   549     06E6  2E9F               	goto	l33
   550     06E7  118A  2800         	ljmp	start
   551     06E9                     __end_of_main:
   552                           
   553                           	psect	text1
   554     05D7                     __ptext1:	
   555 ;; *************** function _sprintf *****************
   556 ;; Defined at:
   557 ;;		line 9 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/nf_sprintf.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  s               1    wreg     PTR unsigned char 
   560 ;;		 -> main@buffer(50), 
   561 ;;  fmt             1    9[BANK0 ] PTR const unsigned char 
   562 ;;		 -> STR_1(21), 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  s               1   16[BANK0 ] PTR unsigned char 
   565 ;;		 -> main@buffer(50), 
   566 ;;  f              11   17[BANK0 ] struct _IO_FILE
   567 ;;  ret             2    0        int 
   568 ;;  ap              1   15[BANK0 ] PTR void [1]
   569 ;;		 -> ?_sprintf(2), 
   570 ;; Return value:  Size  Location     Type
   571 ;;                  2    9[BANK0 ] int 
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   579 ;;      Params:         0       5       0       0
   580 ;;      Locals:         0      13       0       0
   581 ;;      Temps:          0       1       0       0
   582 ;;      Totals:         0      19       0       0
   583 ;;Total ram usage:       19 bytes
   584 ;; Hardware stack levels used: 1
   585 ;; Hardware stack levels required when called: 4
   586 ;; This function calls:
   587 ;;		_vfprintf
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593     05D7                     _sprintf:	
   594                           ;psect for function _sprintf
   595                           
   596                           
   597                           ;incstack = 0
   598                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   599                           ;sprintf@s stored from wreg
   600     05D7  1283               	bcf	3,5	;RP0=0, select bank0
   601     05D8  1303               	bcf	3,6	;RP1=0, select bank0
   602     05D9  00D5               	movwf	sprintf@s
   603     05DA                     l900:
   604     05DA  304F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   605     05DB  00D4               	movwf	sprintf@ap
   606     05DC  0855               	movf	sprintf@s,w
   607     05DD  00D6               	movwf	sprintf@f
   608     05DE                     l902:
   609     05DE  01D8               	clrf	sprintf@f+2
   610     05DF  01D9               	clrf	sprintf@f+3
   611     05E0                     l904:
   612     05E0  01DF               	clrf	sprintf@f+9
   613     05E1  01E0               	clrf	sprintf@f+10
   614     05E2                     l906:
   615     05E2  084E               	movf	sprintf@fmt,w
   616     05E3  00FC               	movwf	vfprintf@fmt
   617     05E4  3054               	movlw	(low (sprintf@ap| 0))& (0+255)
   618     05E5  00FD               	movwf	vfprintf@ap
   619     05E6  3056               	movlw	(low (sprintf@f| 0))& (0+255)
   620     05E7  118A  25BA  118A   	fcall	_vfprintf
   621     05EA                     l908:
   622     05EA  1283               	bcf	3,5	;RP0=0, select bank0
   623     05EB  1303               	bcf	3,6	;RP1=0, select bank0
   624     05EC  0858               	movf	sprintf@f+2,w
   625     05ED  0755               	addwf	sprintf@s,w
   626     05EE  00D3               	movwf	??_sprintf
   627     05EF  0853               	movf	??_sprintf,w
   628     05F0  0084               	movwf	4
   629     05F1  1383               	bcf	3,7	;select IRP bank0
   630     05F2  0180               	clrf	0
   631     05F3                     l527:
   632     05F3  0008               	return
   633     05F4                     __end_of_sprintf:
   634                           
   635                           	psect	text2
   636     05BA                     __ptext2:	
   637 ;; *************** function _vfprintf *****************
   638 ;; Defined at:
   639 ;;		line 1817 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  fp              1    wreg     PTR struct _IO_FILE
   642 ;;		 -> sprintf@f(11), 
   643 ;;  fmt             1   12[COMMON] PTR const unsigned char 
   644 ;;		 -> STR_1(21), 
   645 ;;  ap              1   13[COMMON] PTR PTR void 
   646 ;;		 -> sprintf@ap(1), 
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  fp              1    7[BANK0 ] PTR struct _IO_FILE
   649 ;;		 -> sprintf@f(11), 
   650 ;;  cfmt            1    8[BANK0 ] PTR unsigned char 
   651 ;;		 -> STR_1(21), 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  2   12[COMMON] int 
   654 ;; Registers used:
   655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   661 ;;      Params:         2       0       0       0
   662 ;;      Locals:         0       2       0       0
   663 ;;      Temps:          0       0       0       0
   664 ;;      Totals:         2       2       0       0
   665 ;;Total ram usage:        4 bytes
   666 ;; Hardware stack levels used: 1
   667 ;; Hardware stack levels required when called: 3
   668 ;; This function calls:
   669 ;;		_vfpfcnvrt
   670 ;; This function is called by:
   671 ;;		_sprintf
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675     05BA                     _vfprintf:	
   676                           ;psect for function _vfprintf
   677                           
   678                           
   679                           ;incstack = 0
   680                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   681                           ;vfprintf@fp stored from wreg
   682     05BA  1283               	bcf	3,5	;RP0=0, select bank0
   683     05BB  1303               	bcf	3,6	;RP1=0, select bank0
   684     05BC  00CC               	movwf	vfprintf@fp
   685     05BD                     l870:
   686                           
   687                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1817: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1
      +                          818: {;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1820:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1822:     cfmt = (char *)fmt;
   688     05BD  087C               	movf	vfprintf@fmt,w
   689     05BE  00CD               	movwf	vfprintf@cfmt
   690                           
   691                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
   692     05BF  2DC8               	goto	l874
   693     05C0                     l872:
   694                           
   695                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1830:    vfpfcnvrt(fp, &cfmt,
      +                           ap);
   696     05C0  304D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
   697     05C1  00F8               	movwf	vfpfcnvrt@fmt
   698     05C2  087D               	movf	vfprintf@ap,w
   699     05C3  00F9               	movwf	vfpfcnvrt@ap
   700     05C4  084C               	movf	vfprintf@fp,w
   701     05C5  118A  273D  118A   	fcall	_vfpfcnvrt
   702     05C8                     l874:
   703                           
   704                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
   705     05C8  1283               	bcf	3,5	;RP0=0, select bank0
   706     05C9  1303               	bcf	3,6	;RP1=0, select bank0
   707     05CA  084D               	movf	vfprintf@cfmt,w
   708     05CB  0084               	movwf	4
   709     05CC  118A  2002  118A   	fcall	stringdir
   710     05CF  3A00               	xorlw	0
   711     05D0  1D03               	skipz
   712     05D1  2DD3               	goto	u511
   713     05D2  2DD4               	goto	u510
   714     05D3                     u511:
   715     05D3  2DC0               	goto	l872
   716     05D4                     u510:
   717     05D4                     l876:
   718                           
   719                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1835:  return 0;
   720     05D4  01FC               	clrf	?_vfprintf
   721     05D5  01FD               	clrf	?_vfprintf+1
   722     05D6                     l571:
   723     05D6  0008               	return
   724     05D7                     __end_of_vfprintf:
   725                           
   726                           	psect	text3
   727     073D                     __ptext3:	
   728 ;; *************** function _vfpfcnvrt *****************
   729 ;; Defined at:
   730 ;;		line 1177 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;  fp              1    wreg     PTR struct _IO_FILE
   733 ;;		 -> sprintf@f(11), 
   734 ;;  fmt             1    8[COMMON] PTR PTR unsigned char 
   735 ;;		 -> vfprintf@cfmt(1), 
   736 ;;  ap              1    9[COMMON] PTR PTR void 
   737 ;;		 -> sprintf@ap(1), 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
   740 ;;		 -> sprintf@f(11), 
   741 ;;  convarg         4    1[BANK0 ] struct .
   742 ;;  c               1    6[BANK0 ] unsigned char 
   743 ;;  cp              1    5[BANK0 ] PTR unsigned char 
   744 ;;		 -> STR_1(21), 
   745 ;;  done            1    0        _Bool 
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   755 ;;      Params:         2       0       0       0
   756 ;;      Locals:         0       7       0       0
   757 ;;      Temps:          2       0       0       0
   758 ;;      Totals:         4       7       0       0
   759 ;;Total ram usage:       11 bytes
   760 ;; Hardware stack levels used: 1
   761 ;; Hardware stack levels required when called: 2
   762 ;; This function calls:
   763 ;;		___lwdiv
   764 ;;		___lwmod
   765 ;;		_fputc
   766 ;; This function is called by:
   767 ;;		_vfprintf
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771     073D                     _vfpfcnvrt:	
   772                           ;psect for function _vfpfcnvrt
   773                           
   774                           
   775                           ;incstack = 0
   776                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   777                           ;vfpfcnvrt@fp stored from wreg
   778     073D  1283               	bcf	3,5	;RP0=0, select bank0
   779     073E  1303               	bcf	3,6	;RP1=0, select bank0
   780     073F  00C5               	movwf	vfpfcnvrt@fp
   781     0740                     l824:
   782                           
   783                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1177: vfpfcnvrt(FILE *fp, cha
      +                          r *fmt[], va_list ap);/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1178: {;
      +                          /opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1179:     char c, *cp;;/opt/mi
      +                          crochip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1180:     _Bool done;;/opt/microchip/
      +                          xc8/v2.46/pic/sources/c99/common/doprnt.c: 1188:  } convarg;;/opt/microchip/xc8/v2.46/pi
      +                          c/sources/c99/common/doprnt.c: 1201:     if ((*fmt)[0] == '%') {
   784     0740  0878               	movf	vfpfcnvrt@fmt,w
   785     0741  0084               	movwf	4
   786     0742  1383               	bcf	3,7	;select IRP bank0
   787     0743  0800               	movf	0,w
   788     0744  0084               	movwf	4
   789     0745  118A  2002  118A   	fcall	stringdir
   790     0748  3A25               	xorlw	37
   791     0749  1D03               	skipz
   792     074A  2F4C               	goto	u451
   793     074B  2F4D               	goto	u450
   794     074C                     u451:
   795     074C  2FE2               	goto	l860
   796     074D                     u450:
   797     074D                     l826:
   798                           
   799                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1202:         ++*fmt;
   800     074D  3001               	movlw	1
   801     074E  00FA               	movwf	??_vfpfcnvrt
   802     074F  0878               	movf	vfpfcnvrt@fmt,w
   803     0750  0084               	movwf	4
   804     0751  087A               	movf	??_vfpfcnvrt,w
   805     0752  0780               	addwf	0,f
   806     0753                     l828:
   807                           
   808                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1204:         flags = width =
      +                           0;
   809     0753  01C0               	clrf	_width
   810     0754  01C1               	clrf	_width+1
   811     0755  1003               	clrc
   812     0756  3000               	movlw	0
   813     0757  1803               	btfsc	3,0
   814     0758  3001               	movlw	1
   815     0759  00C4               	movwf	_flags
   816     075A                     l830:
   817                           
   818                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1205:         prec = -1;
   819     075A  30FF               	movlw	255
   820     075B  00C2               	movwf	_prec
   821     075C  30FF               	movlw	255
   822     075D  00C3               	movwf	_prec+1
   823                           
   824                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1439:   if (0
   825     075E  0878               	movf	vfpfcnvrt@fmt,w
   826     075F  0084               	movwf	4
   827     0760  0800               	movf	0,w
   828     0761  00CA               	movwf	vfpfcnvrt@cp
   829     0762                     l832:
   830     0762  084A               	movf	vfpfcnvrt@cp,w
   831     0763  0084               	movwf	4
   832     0764  118A  2002  118A   	fcall	stringdir
   833     0767  3A75               	xorlw	117
   834     0768  1D03               	skipz
   835     0769  2F6B               	goto	u461
   836     076A  2F6C               	goto	u460
   837     076B                     u461:
   838     076B  2FDA               	goto	l856
   839     076C                     u460:
   840     076C                     l834:
   841                           
   842                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1452:     ) {;/opt/microchip/
      +                          xc8/v2.46/pic/sources/c99/common/doprnt.c: 1495:    convarg.uint = (vfpf_uint_t)(unsigne
      +                          d int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
   843     076C  0879               	movf	vfpfcnvrt@ap,w
   844     076D  0084               	movwf	4
   845     076E  0800               	movf	0,w
   846     076F  00FA               	movwf	??_vfpfcnvrt
   847     0770  3002               	movlw	2
   848     0771  0780               	addwf	0,f
   849     0772  087A               	movf	??_vfpfcnvrt,w
   850     0773  0084               	movwf	4
   851     0774  0800               	movf	0,w
   852     0775  00C6               	movwf	vfpfcnvrt@convarg
   853     0776  0A84               	incf	4,f
   854     0777  0800               	movf	0,w
   855     0778  00C7               	movwf	vfpfcnvrt@convarg+1
   856                           
   857                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1497:    *fmt = cp+1;
   858     0779  0878               	movf	vfpfcnvrt@fmt,w
   859     077A  0084               	movwf	4
   860     077B  084A               	movf	vfpfcnvrt@cp,w
   861     077C  3E01               	addlw	1
   862     077D  0080               	movwf	0
   863                           
   864                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1498:    switch (*cp) {
   865     077E  2FD1               	goto	l854
   866     077F                     l836:
   867                           
   868                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1525:      c = sizeof(dbuf);
   869     077F  3020               	movlw	32
   870     0780  00CB               	movwf	vfpfcnvrt@c
   871     0781                     l838:
   872                           
   873                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1527:       dbuf[--c] = (conv
      +                          arg.uint % 10) + '0';
   874     0781  3001               	movlw	1
   875     0782  02CB               	subwf	vfpfcnvrt@c,f
   876     0783  084B               	movf	vfpfcnvrt@c,w
   877     0784  3E20               	addlw	(low (_dbuf| 0))& (0+255)
   878     0785  0084               	movwf	4
   879     0786  300A               	movlw	10
   880     0787  00F0               	movwf	___lwmod@divisor
   881     0788  3000               	movlw	0
   882     0789  00F1               	movwf	___lwmod@divisor+1
   883     078A  0847               	movf	vfpfcnvrt@convarg+1,w
   884     078B  00F3               	movwf	___lwmod@dividend+1
   885     078C  0846               	movf	vfpfcnvrt@convarg,w
   886     078D  00F2               	movwf	___lwmod@dividend
   887     078E  118A  261B  118A   	fcall	___lwmod
   888     0791  0870               	movf	?___lwmod,w
   889     0792  3E30               	addlw	48
   890     0793  1383               	bcf	3,7	;select IRP bank0
   891     0794  0080               	movwf	0
   892     0795                     l840:
   893                           
   894                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1528:       convarg.uint /= 1
      +                          0;
   895     0795  300A               	movlw	10
   896     0796  00F0               	movwf	___lwdiv@divisor
   897     0797  3000               	movlw	0
   898     0798  00F1               	movwf	___lwdiv@divisor+1
   899     0799  1283               	bcf	3,5	;RP0=0, select bank0
   900     079A  1303               	bcf	3,6	;RP1=0, select bank0
   901     079B  0847               	movf	vfpfcnvrt@convarg+1,w
   902     079C  00F3               	movwf	___lwdiv@dividend+1
   903     079D  0846               	movf	vfpfcnvrt@convarg,w
   904     079E  00F2               	movwf	___lwdiv@dividend
   905     079F  118A  2655  118A   	fcall	___lwdiv
   906     07A2  0871               	movf	?___lwdiv+1,w
   907     07A3  1283               	bcf	3,5	;RP0=0, select bank0
   908     07A4  1303               	bcf	3,6	;RP1=0, select bank0
   909     07A5  00C7               	movwf	vfpfcnvrt@convarg+1
   910     07A6  0870               	movf	?___lwdiv,w
   911     07A7  00C6               	movwf	vfpfcnvrt@convarg
   912     07A8                     l842:
   913                           
   914                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1532:      } while (convarg.u
      +                          int != 0 && c != 0);
   915     07A8  0846               	movf	vfpfcnvrt@convarg,w
   916     07A9  0447               	iorwf	vfpfcnvrt@convarg+1,w
   917     07AA  1903               	btfsc	3,2
   918     07AB  2FAD               	goto	u471
   919     07AC  2FAE               	goto	u470
   920     07AD                     u471:
   921     07AD  2FCA               	goto	l850
   922     07AE                     u470:
   923     07AE                     l844:
   924     07AE  084B               	movf	vfpfcnvrt@c,w
   925     07AF  1D03               	btfss	3,2
   926     07B0  2FB2               	goto	u481
   927     07B1  2FB3               	goto	u480
   928     07B2                     u481:
   929     07B2  2F81               	goto	l838
   930     07B3                     u480:
   931     07B3  2FCA               	goto	l850
   932     07B4                     l846:
   933                           
   934                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1534:       fputc(dbuf[c++], 
      +                          fp);
   935     07B4  084B               	movf	vfpfcnvrt@c,w
   936     07B5  3E20               	addlw	(low (_dbuf| 0))& (0+255)
   937     07B6  0084               	movwf	4
   938     07B7  1383               	bcf	3,7	;select IRP bank0
   939     07B8  0800               	movf	0,w
   940     07B9  00FA               	movwf	??_vfpfcnvrt
   941     07BA  01FB               	clrf	??_vfpfcnvrt+1
   942     07BB  087A               	movf	??_vfpfcnvrt,w
   943     07BC  00F0               	movwf	fputc@c
   944     07BD  087B               	movf	??_vfpfcnvrt+1,w
   945     07BE  00F1               	movwf	fputc@c+1
   946     07BF  0845               	movf	vfpfcnvrt@fp,w
   947     07C0  00F2               	movwf	fputc@fp
   948     07C1  118A  26E9  118A   	fcall	_fputc
   949     07C4                     l848:
   950     07C4  3001               	movlw	1
   951     07C5  00FA               	movwf	??_vfpfcnvrt
   952     07C6  087A               	movf	??_vfpfcnvrt,w
   953     07C7  1283               	bcf	3,5	;RP0=0, select bank0
   954     07C8  1303               	bcf	3,6	;RP1=0, select bank0
   955     07C9  07CB               	addwf	vfpfcnvrt@c,f
   956     07CA                     l850:
   957                           
   958                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1533:      while (c != sizeof
      +                          (dbuf)) {
   959     07CA  3020               	movlw	32
   960     07CB  064B               	xorwf	vfpfcnvrt@c,w
   961     07CC  1D03               	btfss	3,2
   962     07CD  2FCF               	goto	u491
   963     07CE  2FD0               	goto	u490
   964     07CF                     u491:
   965     07CF  2FB4               	goto	l846
   966     07D0                     u490:
   967     07D0  2FF5               	goto	l564
   968     07D1                     l854:
   969     07D1  084A               	movf	vfpfcnvrt@cp,w
   970     07D2  0084               	movwf	4
   971     07D3  118A  2002  118A   	fcall	stringdir
   972                           
   973                           ; Switch size 1, requested type "simple"
   974                           ; Number of cases is 1, Range of values is 117 to 117
   975                           ; switch strategies available:
   976                           ; Name         Instructions Cycles
   977                           ; simple_byte            4     3 (average)
   978                           ; direct_byte           12    10 (fixed)
   979                           ; jumptable            263     9 (fixed)
   980                           ;	Chosen strategy is simple_byte
   981     07D6  3A75               	xorlw	117	; case 117
   982     07D7  1903               	skipnz
   983     07D8  2F7F               	goto	l836
   984     07D9  2FDA               	goto	l856
   985     07DA                     l856:
   986                           
   987                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1806:         ++*fmt;
   988     07DA  3001               	movlw	1
   989     07DB  00FA               	movwf	??_vfpfcnvrt
   990     07DC  0878               	movf	vfpfcnvrt@fmt,w
   991     07DD  0084               	movwf	4
   992     07DE  087A               	movf	??_vfpfcnvrt,w
   993     07DF  1383               	bcf	3,7	;select IRP bank0
   994     07E0  0780               	addwf	0,f
   995     07E1  2FF5               	goto	l564
   996     07E2                     l860:
   997                           
   998                           ;/opt/microchip/xc8/v2.46/pic/sources/c99/common/doprnt.c: 1811:     fputc((int)(*fmt)[0
      +                          ], fp);
   999     07E2  0878               	movf	vfpfcnvrt@fmt,w
  1000     07E3  0084               	movwf	4
  1001     07E4  0800               	movf	0,w
  1002     07E5  0084               	movwf	4
  1003     07E6  118A  2002  118A   	fcall	stringdir
  1004     07E9  00FA               	movwf	??_vfpfcnvrt
  1005     07EA  01FB               	clrf	??_vfpfcnvrt+1
  1006     07EB  087A               	movf	??_vfpfcnvrt,w
  1007     07EC  00F0               	movwf	fputc@c
  1008     07ED  087B               	movf	??_vfpfcnvrt+1,w
  1009     07EE  00F1               	movwf	fputc@c+1
  1010     07EF  0845               	movf	vfpfcnvrt@fp,w
  1011     07F0  00F2               	movwf	fputc@fp
  1012     07F1  118A  26E9  118A   	fcall	_fputc
  1013     07F4  2FDA               	goto	l856
  1014     07F5                     l564:
  1015     07F5  0008               	return
  1016     07F6                     __end_of_vfpfcnvrt:
  1017                           
  1018                           	psect	text4
  1019     06E9                     __ptext4:	
  1020 ;; *************** function _fputc *****************
  1021 ;; Defined at:
  1022 ;;		line 8 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/nf_fputc.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  c               2    0[COMMON] int 
  1025 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  1026 ;;		 -> sprintf@f(11), 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  2    0[COMMON] int 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1038 ;;      Params:         3       0       0       0
  1039 ;;      Locals:         0       0       0       0
  1040 ;;      Temps:          5       0       0       0
  1041 ;;      Totals:         8       0       0       0
  1042 ;;Total ram usage:        8 bytes
  1043 ;; Hardware stack levels used: 1
  1044 ;; Hardware stack levels required when called: 1
  1045 ;; This function calls:
  1046 ;;		_putch
  1047 ;; This function is called by:
  1048 ;;		_vfpfcnvrt
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052     06E9                     _fputc:	
  1053                           ;psect for function _fputc
  1054                           
  1055     06E9                     l810:	
  1056                           ;incstack = 0
  1057                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1058                           
  1059     06E9  0872               	movf	fputc@fp,w
  1060     06EA  1903               	btfsc	3,2
  1061     06EB  2EED               	goto	u411
  1062     06EC  2EEE               	goto	u410
  1063     06ED                     u411:
  1064     06ED  2EF3               	goto	l814
  1065     06EE                     u410:
  1066     06EE                     l812:
  1067     06EE  0872               	movf	fputc@fp,w
  1068     06EF  1D03               	btfss	3,2
  1069     06F0  2EF2               	goto	u421
  1070     06F1  2EF3               	goto	u420
  1071     06F2                     u421:
  1072     06F2  2EF8               	goto	l816
  1073     06F3                     u420:
  1074     06F3                     l814:
  1075     06F3  0870               	movf	fputc@c,w
  1076     06F4  118A  257C  118A   	fcall	_putch
  1077     06F7  2F3C               	goto	l583
  1078     06F8                     l816:
  1079     06F8  0872               	movf	fputc@fp,w
  1080     06F9  3E09               	addlw	9
  1081     06FA  0084               	movwf	4
  1082     06FB  1383               	bcf	3,7	;select IRP bank0
  1083     06FC  0800               	movf	0,w
  1084     06FD  00F3               	movwf	??_fputc
  1085     06FE  0A84               	incf	4,f
  1086     06FF  0800               	movf	0,w
  1087     0700  00F4               	movwf	??_fputc+1
  1088     0701  0873               	movf	??_fputc,w
  1089     0702  0474               	iorwf	??_fputc+1,w
  1090     0703  1903               	btfsc	3,2
  1091     0704  2F06               	goto	u431
  1092     0705  2F07               	goto	u430
  1093     0706                     u431:
  1094     0706  2F25               	goto	l820
  1095     0707                     u430:
  1096     0707                     l818:
  1097     0707  0872               	movf	fputc@fp,w
  1098     0708  3E09               	addlw	9
  1099     0709  0084               	movwf	4
  1100     070A  0800               	movf	0,w
  1101     070B  00F3               	movwf	??_fputc
  1102     070C  0A84               	incf	4,f
  1103     070D  0800               	movf	0,w
  1104     070E  00F4               	movwf	??_fputc+1
  1105     070F  0872               	movf	fputc@fp,w
  1106     0710  3E02               	addlw	2
  1107     0711  0084               	movwf	4
  1108     0712  0800               	movf	0,w
  1109     0713  00F5               	movwf	??_fputc+2
  1110     0714  0A84               	incf	4,f
  1111     0715  0800               	movf	0,w
  1112     0716  00F6               	movwf	??_fputc+3
  1113     0717  0876               	movf	??_fputc+3,w
  1114     0718  3A80               	xorlw	128
  1115     0719  00F7               	movwf	??_fputc+4
  1116     071A  0874               	movf	??_fputc+1,w
  1117     071B  3A80               	xorlw	128
  1118     071C  0277               	subwf	??_fputc+4,w
  1119     071D  1D03               	skipz
  1120     071E  2F21               	goto	u445
  1121     071F  0873               	movf	??_fputc,w
  1122     0720  0275               	subwf	??_fputc+2,w
  1123     0721                     u445:
  1124     0721  1803               	skipnc
  1125     0722  2F24               	goto	u441
  1126     0723  2F25               	goto	u440
  1127     0724                     u441:
  1128     0724  2F3C               	goto	l583
  1129     0725                     u440:
  1130     0725                     l820:
  1131     0725  0872               	movf	fputc@fp,w
  1132     0726  3E02               	addlw	2
  1133     0727  0084               	movwf	4
  1134     0728  1383               	bcf	3,7	;select IRP bank0
  1135     0729  0800               	movf	0,w
  1136     072A  00F3               	movwf	??_fputc
  1137     072B  0872               	movf	fputc@fp,w
  1138     072C  0084               	movwf	4
  1139     072D  0800               	movf	0,w
  1140     072E  0773               	addwf	??_fputc,w
  1141     072F  00F4               	movwf	??_fputc+1
  1142     0730  0874               	movf	??_fputc+1,w
  1143     0731  0084               	movwf	4
  1144     0732  0870               	movf	fputc@c,w
  1145     0733  0080               	movwf	0
  1146     0734  0872               	movf	fputc@fp,w
  1147     0735  3E02               	addlw	2
  1148     0736  0084               	movwf	4
  1149     0737  3001               	movlw	1
  1150     0738  0780               	addwf	0,f
  1151     0739  0A84               	incf	4,f
  1152     073A  1803               	skipnc
  1153     073B  0A80               	incf	0,f
  1154     073C                     l583:
  1155     073C  0008               	return
  1156     073D                     __end_of_fputc:
  1157                           
  1158                           	psect	text5
  1159     057C                     __ptext5:	
  1160 ;; *************** function _putch *****************
  1161 ;; Defined at:
  1162 ;;		line 7 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/putch.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  c               1    wreg     unsigned char 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  c               1    0[COMMON] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1176 ;;      Params:         0       0       0       0
  1177 ;;      Locals:         0       0       0       0
  1178 ;;      Temps:          0       0       0       0
  1179 ;;      Totals:         0       0       0       0
  1180 ;;Total ram usage:        0 bytes
  1181 ;; Hardware stack levels used: 1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_fputc
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189     057C                     _putch:	
  1190                           ;psect for function _putch
  1191                           
  1192     057C                     l594:	
  1193                           ;incstack = 0
  1194                           ; Regs used in _putch: [wreg]
  1195                           
  1196     057C  0008               	return
  1197     057D                     __end_of_putch:
  1198                           
  1199                           	psect	text6
  1200     061B                     __ptext6:	
  1201 ;; *************** function ___lwmod *****************
  1202 ;; Defined at:
  1203 ;;		line 5 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/lwmod.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;  divisor         2    0[COMMON] unsigned int 
  1206 ;;  dividend        2    2[COMMON] unsigned int 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  counter         1    5[COMMON] unsigned char 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  2    0[COMMON] unsigned int 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1218 ;;      Params:         4       0       0       0
  1219 ;;      Locals:         1       0       0       0
  1220 ;;      Temps:          1       0       0       0
  1221 ;;      Totals:         6       0       0       0
  1222 ;;Total ram usage:        6 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_vfpfcnvrt
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231     061B                     ___lwmod:	
  1232                           ;psect for function ___lwmod
  1233                           
  1234     061B                     l788:	
  1235                           ;incstack = 0
  1236                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1237                           
  1238     061B  0870               	movf	___lwmod@divisor,w
  1239     061C  0471               	iorwf	___lwmod@divisor+1,w
  1240     061D  1903               	btfsc	3,2
  1241     061E  2E20               	goto	u351
  1242     061F  2E21               	goto	u350
  1243     0620                     u351:
  1244     0620  2E50               	goto	l806
  1245     0621                     u350:
  1246     0621                     l790:
  1247     0621  01F5               	clrf	___lwmod@counter
  1248     0622  0AF5               	incf	___lwmod@counter,f
  1249     0623  2E2F               	goto	l796
  1250     0624                     l792:
  1251     0624  3001               	movlw	1
  1252     0625                     u365:
  1253     0625  1003               	clrc
  1254     0626  0DF0               	rlf	___lwmod@divisor,f
  1255     0627  0DF1               	rlf	___lwmod@divisor+1,f
  1256     0628  3EFF               	addlw	-1
  1257     0629  1D03               	skipz
  1258     062A  2E25               	goto	u365
  1259     062B                     l794:
  1260     062B  3001               	movlw	1
  1261     062C  00F4               	movwf	??___lwmod
  1262     062D  0874               	movf	??___lwmod,w
  1263     062E  07F5               	addwf	___lwmod@counter,f
  1264     062F                     l796:
  1265     062F  1FF1               	btfss	___lwmod@divisor+1,7
  1266     0630  2E32               	goto	u371
  1267     0631  2E33               	goto	u370
  1268     0632                     u371:
  1269     0632  2E24               	goto	l792
  1270     0633                     u370:
  1271     0633                     l798:
  1272     0633  0871               	movf	___lwmod@divisor+1,w
  1273     0634  0273               	subwf	___lwmod@dividend+1,w
  1274     0635  1D03               	skipz
  1275     0636  2E39               	goto	u385
  1276     0637  0870               	movf	___lwmod@divisor,w
  1277     0638  0272               	subwf	___lwmod@dividend,w
  1278     0639                     u385:
  1279     0639  1C03               	skipc
  1280     063A  2E3C               	goto	u381
  1281     063B  2E3D               	goto	u380
  1282     063C                     u381:
  1283     063C  2E43               	goto	l802
  1284     063D                     u380:
  1285     063D                     l800:
  1286     063D  0870               	movf	___lwmod@divisor,w
  1287     063E  02F2               	subwf	___lwmod@dividend,f
  1288     063F  0871               	movf	___lwmod@divisor+1,w
  1289     0640  1C03               	skipc
  1290     0641  03F3               	decf	___lwmod@dividend+1,f
  1291     0642  02F3               	subwf	___lwmod@dividend+1,f
  1292     0643                     l802:
  1293     0643  3001               	movlw	1
  1294     0644                     u395:
  1295     0644  1003               	clrc
  1296     0645  0CF1               	rrf	___lwmod@divisor+1,f
  1297     0646  0CF0               	rrf	___lwmod@divisor,f
  1298     0647  3EFF               	addlw	-1
  1299     0648  1D03               	skipz
  1300     0649  2E44               	goto	u395
  1301     064A                     l804:
  1302     064A  3001               	movlw	1
  1303     064B  02F5               	subwf	___lwmod@counter,f
  1304     064C  1D03               	btfss	3,2
  1305     064D  2E4F               	goto	u401
  1306     064E  2E50               	goto	u400
  1307     064F                     u401:
  1308     064F  2E33               	goto	l798
  1309     0650                     u400:
  1310     0650                     l806:
  1311     0650  0873               	movf	___lwmod@dividend+1,w
  1312     0651  00F1               	movwf	?___lwmod+1
  1313     0652  0872               	movf	___lwmod@dividend,w
  1314     0653  00F0               	movwf	?___lwmod
  1315     0654                     l354:
  1316     0654  0008               	return
  1317     0655                     __end_of___lwmod:
  1318                           
  1319                           	psect	text7
  1320     0655                     __ptext7:	
  1321 ;; *************** function ___lwdiv *****************
  1322 ;; Defined at:
  1323 ;;		line 5 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/lwdiv.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  divisor         2    0[COMMON] unsigned int 
  1326 ;;  dividend        2    2[COMMON] unsigned int 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  quotient        2    5[COMMON] unsigned int 
  1329 ;;  counter         1    7[COMMON] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2    0[COMMON] unsigned int 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1339 ;;      Params:         4       0       0       0
  1340 ;;      Locals:         3       0       0       0
  1341 ;;      Temps:          1       0       0       0
  1342 ;;      Totals:         8       0       0       0
  1343 ;;Total ram usage:        8 bytes
  1344 ;; Hardware stack levels used: 1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_vfpfcnvrt
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352     0655                     ___lwdiv:	
  1353                           ;psect for function ___lwdiv
  1354                           
  1355     0655                     l762:	
  1356                           ;incstack = 0
  1357                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1358                           
  1359     0655  01F5               	clrf	___lwdiv@quotient
  1360     0656  01F6               	clrf	___lwdiv@quotient+1
  1361     0657                     l764:
  1362     0657  0870               	movf	___lwdiv@divisor,w
  1363     0658  0471               	iorwf	___lwdiv@divisor+1,w
  1364     0659  1903               	btfsc	3,2
  1365     065A  2E5C               	goto	u281
  1366     065B  2E5D               	goto	u280
  1367     065C                     u281:
  1368     065C  2E94               	goto	l784
  1369     065D                     u280:
  1370     065D                     l766:
  1371     065D  01F7               	clrf	___lwdiv@counter
  1372     065E  0AF7               	incf	___lwdiv@counter,f
  1373     065F  2E6B               	goto	l772
  1374     0660                     l768:
  1375     0660  3001               	movlw	1
  1376     0661                     u295:
  1377     0661  1003               	clrc
  1378     0662  0DF0               	rlf	___lwdiv@divisor,f
  1379     0663  0DF1               	rlf	___lwdiv@divisor+1,f
  1380     0664  3EFF               	addlw	-1
  1381     0665  1D03               	skipz
  1382     0666  2E61               	goto	u295
  1383     0667                     l770:
  1384     0667  3001               	movlw	1
  1385     0668  00F4               	movwf	??___lwdiv
  1386     0669  0874               	movf	??___lwdiv,w
  1387     066A  07F7               	addwf	___lwdiv@counter,f
  1388     066B                     l772:
  1389     066B  1FF1               	btfss	___lwdiv@divisor+1,7
  1390     066C  2E6E               	goto	u301
  1391     066D  2E6F               	goto	u300
  1392     066E                     u301:
  1393     066E  2E60               	goto	l768
  1394     066F                     u300:
  1395     066F                     l774:
  1396     066F  3001               	movlw	1
  1397     0670                     u315:
  1398     0670  1003               	clrc
  1399     0671  0DF5               	rlf	___lwdiv@quotient,f
  1400     0672  0DF6               	rlf	___lwdiv@quotient+1,f
  1401     0673  3EFF               	addlw	-1
  1402     0674  1D03               	skipz
  1403     0675  2E70               	goto	u315
  1404     0676  0871               	movf	___lwdiv@divisor+1,w
  1405     0677  0273               	subwf	___lwdiv@dividend+1,w
  1406     0678  1D03               	skipz
  1407     0679  2E7C               	goto	u325
  1408     067A  0870               	movf	___lwdiv@divisor,w
  1409     067B  0272               	subwf	___lwdiv@dividend,w
  1410     067C                     u325:
  1411     067C  1C03               	skipc
  1412     067D  2E7F               	goto	u321
  1413     067E  2E80               	goto	u320
  1414     067F                     u321:
  1415     067F  2E87               	goto	l780
  1416     0680                     u320:
  1417     0680                     l776:
  1418     0680  0870               	movf	___lwdiv@divisor,w
  1419     0681  02F2               	subwf	___lwdiv@dividend,f
  1420     0682  0871               	movf	___lwdiv@divisor+1,w
  1421     0683  1C03               	skipc
  1422     0684  03F3               	decf	___lwdiv@dividend+1,f
  1423     0685  02F3               	subwf	___lwdiv@dividend+1,f
  1424     0686                     l778:
  1425     0686  1475               	bsf	___lwdiv@quotient,0
  1426     0687                     l780:
  1427     0687  3001               	movlw	1
  1428     0688                     u335:
  1429     0688  1003               	clrc
  1430     0689  0CF1               	rrf	___lwdiv@divisor+1,f
  1431     068A  0CF0               	rrf	___lwdiv@divisor,f
  1432     068B  3EFF               	addlw	-1
  1433     068C  1D03               	skipz
  1434     068D  2E88               	goto	u335
  1435     068E                     l782:
  1436     068E  3001               	movlw	1
  1437     068F  02F7               	subwf	___lwdiv@counter,f
  1438     0690  1D03               	btfss	3,2
  1439     0691  2E93               	goto	u341
  1440     0692  2E94               	goto	u340
  1441     0693                     u341:
  1442     0693  2E6F               	goto	l774
  1443     0694                     u340:
  1444     0694                     l784:
  1445     0694  0876               	movf	___lwdiv@quotient+1,w
  1446     0695  00F1               	movwf	?___lwdiv+1
  1447     0696  0875               	movf	___lwdiv@quotient,w
  1448     0697  00F0               	movwf	?___lwdiv
  1449     0698                     l344:
  1450     0698  0008               	return
  1451     0699                     __end_of___lwdiv:
  1452                           
  1453                           	psect	text8
  1454     05F4                     __ptext8:	
  1455 ;; *************** function _readADC *****************
  1456 ;; Defined at:
  1457 ;;		line 74 in file "WH_main.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  channel         1    wreg     unsigned char 
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  channel         1    4[COMMON] unsigned char 
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  2    0[COMMON] unsigned int 
  1464 ;; Registers used:
  1465 ;;		wreg, status,2, status,0
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1471 ;;      Params:         2       0       0       0
  1472 ;;      Locals:         1       0       0       0
  1473 ;;      Temps:          2       0       0       0
  1474 ;;      Totals:         5       0       0       0
  1475 ;;Total ram usage:        5 bytes
  1476 ;; Hardware stack levels used: 1
  1477 ;; This function calls:
  1478 ;;		Nothing
  1479 ;; This function is called by:
  1480 ;;		_main
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484     05F4                     _readADC:	
  1485                           ;psect for function _readADC
  1486                           
  1487                           
  1488                           ;incstack = 0
  1489                           ; Regs used in _readADC: [wreg+status,2+status,0]
  1490                           ;readADC@channel stored from wreg
  1491     05F4  00F4               	movwf	readADC@channel
  1492     05F5                     l890:
  1493                           
  1494                           ;WH_main.c: 75:     ADCON0 = (channel << 2) | 0x01;
  1495     05F5  0874               	movf	readADC@channel,w
  1496     05F6  00F2               	movwf	??_readADC
  1497     05F7  3001               	movlw	1
  1498     05F8                     u525:
  1499     05F8  1003               	clrc
  1500     05F9  0DF2               	rlf	??_readADC,f
  1501     05FA  3EFF               	addlw	-1
  1502     05FB  1D03               	skipz
  1503     05FC  2DF8               	goto	u525
  1504     05FD  1003               	clrc
  1505     05FE  0D72               	rlf	??_readADC,w
  1506     05FF  3801               	iorlw	1
  1507     0600  1283               	bcf	3,5	;RP0=0, select bank0
  1508     0601  1303               	bcf	3,6	;RP1=0, select bank0
  1509     0602  009F               	movwf	31	;volatile
  1510     0603                     l892:
  1511                           
  1512                           ;WH_main.c: 76:     _delay((unsigned long)((2)*(16000000/4000.0)));
  1513     0603  300B               	movlw	11
  1514     0604  00F3               	movwf	??_readADC+1
  1515     0605  3062               	movlw	98
  1516     0606  00F2               	movwf	??_readADC
  1517     0607                     u567:
  1518     0607  0BF2               	decfsz	??_readADC,f
  1519     0608  2E07               	goto	u567
  1520     0609  0BF3               	decfsz	??_readADC+1,f
  1521     060A  2E07               	goto	u567
  1522     060B  0000               	nop
  1523     060C                     l894:
  1524                           
  1525                           ;WH_main.c: 77:     GO_nDONE = 1;
  1526     060C  1283               	bcf	3,5	;RP0=0, select bank0
  1527     060D  1303               	bcf	3,6	;RP1=0, select bank0
  1528     060E  149F               	bsf	31,1	;volatile
  1529     060F                     l42:	
  1530                           ;WH_main.c: 78:     while (GO_nDONE);
  1531                           
  1532     060F  189F               	btfsc	31,1	;volatile
  1533     0610  2E12               	goto	u531
  1534     0611  2E13               	goto	u530
  1535     0612                     u531:
  1536     0612  2E0F               	goto	l42
  1537     0613                     u530:
  1538     0613                     l896:
  1539                           
  1540                           ;WH_main.c: 79:     return ADRES;
  1541     0613  081E               	movf	30,w	;volatile
  1542     0614  00F2               	movwf	??_readADC
  1543     0615  01F3               	clrf	??_readADC+1
  1544     0616  0872               	movf	??_readADC,w
  1545     0617  00F0               	movwf	?_readADC
  1546     0618  0873               	movf	??_readADC+1,w
  1547     0619  00F1               	movwf	?_readADC+1
  1548     061A                     l45:
  1549     061A  0008               	return
  1550     061B                     __end_of_readADC:
  1551                           
  1552                           	psect	text9
  1553     058E                     __ptext9:	
  1554 ;; *************** function _initUART *****************
  1555 ;; Defined at:
  1556 ;;		line 82 in file "WH_main.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1570 ;;      Params:         0       0       0       0
  1571 ;;      Locals:         0       0       0       0
  1572 ;;      Temps:          0       0       0       0
  1573 ;;      Totals:         0       0       0       0
  1574 ;;Total ram usage:        0 bytes
  1575 ;; Hardware stack levels used: 1
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583     058E                     _initUART:	
  1584                           ;psect for function _initUART
  1585                           
  1586     058E                     l882:	
  1587                           ;incstack = 0
  1588                           ; Regs used in _initUART: [wreg]
  1589                           
  1590                           
  1591                           ;WH_main.c: 83:     TXSTAbits.SYNC = 0;
  1592     058E  1683               	bsf	3,5	;RP0=1, select bank1
  1593     058F  1303               	bcf	3,6	;RP1=0, select bank1
  1594     0590  1218               	bcf	24,4	;volatile
  1595                           
  1596                           ;WH_main.c: 84:     TXSTAbits.BRGH = 1;
  1597     0591  1518               	bsf	24,2	;volatile
  1598     0592                     l884:
  1599                           
  1600                           ;WH_main.c: 85:     SPBRG = 25;
  1601     0592  3019               	movlw	25
  1602     0593  0099               	movwf	25	;volatile
  1603     0594                     l886:
  1604                           
  1605                           ;WH_main.c: 86:     TXSTAbits.TXEN = 1;
  1606     0594  1698               	bsf	24,5	;volatile
  1607     0595                     l888:
  1608                           
  1609                           ;WH_main.c: 87:     RCSTAbits.SPEN = 1;
  1610     0595  1283               	bcf	3,5	;RP0=0, select bank0
  1611     0596  1303               	bcf	3,6	;RP1=0, select bank0
  1612     0597  1798               	bsf	24,7	;volatile
  1613     0598                     l48:
  1614     0598  0008               	return
  1615     0599                     __end_of_initUART:
  1616                           
  1617                           	psect	text10
  1618     0585                     __ptext10:	
  1619 ;; *************** function _initADC *****************
  1620 ;; Defined at:
  1621 ;;		line 69 in file "WH_main.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1635 ;;      Params:         0       0       0       0
  1636 ;;      Locals:         0       0       0       0
  1637 ;;      Temps:          0       0       0       0
  1638 ;;      Totals:         0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used: 1
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648     0585                     _initADC:	
  1649                           ;psect for function _initADC
  1650                           
  1651     0585                     l880:	
  1652                           ;incstack = 0
  1653                           ; Regs used in _initADC: [wreg]
  1654                           
  1655                           
  1656                           ;WH_main.c: 70:     ADCON0 = 0b00000001;
  1657     0585  3001               	movlw	1
  1658     0586  1283               	bcf	3,5	;RP0=0, select bank0
  1659     0587  1303               	bcf	3,6	;RP1=0, select bank0
  1660     0588  009F               	movwf	31	;volatile
  1661                           
  1662                           ;WH_main.c: 71:     ADCON1 = 0b00001110;
  1663     0589  300E               	movlw	14
  1664     058A  1683               	bsf	3,5	;RP0=1, select bank1
  1665     058B  1303               	bcf	3,6	;RP1=0, select bank1
  1666     058C  009F               	movwf	31	;volatile
  1667     058D                     l39:
  1668     058D  0008               	return
  1669     058E                     __end_of_initADC:
  1670                           
  1671                           	psect	text11
  1672     05A5                     __ptext11:	
  1673 ;; *************** function _UARTSendString *****************
  1674 ;; Defined at:
  1675 ;;		line 95 in file "WH_main.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  str             1    wreg     PTR const unsigned char 
  1678 ;;		 -> main@buffer(50), 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  str             1    2[COMMON] PTR const unsigned char 
  1681 ;;		 -> main@buffer(50), 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1691 ;;      Params:         0       0       0       0
  1692 ;;      Locals:         1       0       0       0
  1693 ;;      Temps:          1       0       0       0
  1694 ;;      Totals:         2       0       0       0
  1695 ;;Total ram usage:        2 bytes
  1696 ;; Hardware stack levels used: 1
  1697 ;; Hardware stack levels required when called: 1
  1698 ;; This function calls:
  1699 ;;		_UARTSendChar
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705     05A5                     _UARTSendString:	
  1706                           ;psect for function _UARTSendString
  1707                           
  1708                           
  1709                           ;incstack = 0
  1710                           ; Regs used in _UARTSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1711                           ;UARTSendString@str stored from wreg
  1712     05A5  00F2               	movwf	UARTSendString@str
  1713     05A6                     l912:
  1714                           
  1715                           ;WH_main.c: 96:     while (*str) {
  1716     05A6  2DB1               	goto	l918
  1717     05A7                     l914:
  1718                           
  1719                           ;WH_main.c: 97:         UARTSendChar(*str++);
  1720     05A7  0872               	movf	UARTSendString@str,w
  1721     05A8  0084               	movwf	4
  1722     05A9  0800               	movf	0,w
  1723     05AA  118A  2599  118A   	fcall	_UARTSendChar
  1724     05AD                     l916:
  1725     05AD  3001               	movlw	1
  1726     05AE  00F1               	movwf	??_UARTSendString
  1727     05AF  0871               	movf	??_UARTSendString,w
  1728     05B0  07F2               	addwf	UARTSendString@str,f
  1729     05B1                     l918:
  1730                           
  1731                           ;WH_main.c: 96:     while (*str) {
  1732     05B1  0872               	movf	UARTSendString@str,w
  1733     05B2  0084               	movwf	4
  1734     05B3  1383               	bcf	3,7	;select IRP bank0
  1735     05B4  0800               	movf	0,w
  1736     05B5  1D03               	btfss	3,2
  1737     05B6  2DB8               	goto	u541
  1738     05B7  2DB9               	goto	u540
  1739     05B8                     u541:
  1740     05B8  2DA7               	goto	l914
  1741     05B9                     u540:
  1742     05B9                     l60:
  1743     05B9  0008               	return
  1744     05BA                     __end_of_UARTSendString:
  1745                           
  1746                           	psect	text12
  1747     0599                     __ptext12:	
  1748 ;; *************** function _UARTSendChar *****************
  1749 ;; Defined at:
  1750 ;;		line 90 in file "WH_main.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  data            1    wreg     unsigned char 
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;  data            1    0[COMMON] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1764 ;;      Params:         0       0       0       0
  1765 ;;      Locals:         1       0       0       0
  1766 ;;      Temps:          0       0       0       0
  1767 ;;      Totals:         1       0       0       0
  1768 ;;Total ram usage:        1 bytes
  1769 ;; Hardware stack levels used: 1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_UARTSendString
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777     0599                     _UARTSendChar:	
  1778                           ;psect for function _UARTSendChar
  1779                           
  1780                           
  1781                           ;incstack = 0
  1782                           ; Regs used in _UARTSendChar: [wreg]
  1783                           ;UARTSendChar@data stored from wreg
  1784     0599  00F0               	movwf	UARTSendChar@data
  1785     059A                     l866:
  1786     059A                     l51:	
  1787                           ;WH_main.c: 91:     while (!TXSTAbits.TRMT);
  1788                           
  1789     059A  1683               	bsf	3,5	;RP0=1, select bank1
  1790     059B  1303               	bcf	3,6	;RP1=0, select bank1
  1791     059C  1C98               	btfss	24,1	;volatile
  1792     059D  2D9F               	goto	u501
  1793     059E  2DA0               	goto	u500
  1794     059F                     u501:
  1795     059F  2D9A               	goto	l51
  1796     05A0                     u500:
  1797     05A0                     l868:
  1798                           
  1799                           ;WH_main.c: 92:     TXREG = data;
  1800     05A0  0870               	movf	UARTSendChar@data,w
  1801     05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1802     05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1803     05A3  0099               	movwf	25	;volatile
  1804     05A4                     l54:
  1805     05A4  0008               	return
  1806     05A5                     __end_of_UARTSendChar:
  1807     007E                     btemp	set	126	;btemp
  1808     007E                     wtemp0	set	126
  1809                           
  1810                           	psect	config
  1811                           
  1812                           ;Config register CONFIG1 @ 0x2007
  1813                           ;	Oscillator Selection bits
  1814                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/CLKO pin, I/O function on RA
      +                          5/CLKI
  1815                           ;	Watchdog Timer Enable bit
  1816                           ;	WDTE = OFF, WDT disabled
  1817                           ;	Power-up Timer Enable bit
  1818                           ;	PWRTE = OFF, PWRT disabled
  1819                           ;	RA3/MCLR/VPP Pin Function Select bit
  1820                           ;	MCLRE = ON, RA3/MCLR/VPP pin function is MCLR; Weak pull-up enabled.
  1821                           ;	Flash Program Memory Code Protection bit
  1822                           ;	CP = OFF, Code protection off
  1823                           ;	Brown-out Reset Enable bits
  1824                           ;	BOREN = OFF, Brown-out Reset disabled (Preconditioned State)
  1825                           ;	INTOSC PLLEN Enable Bit
  1826                           ;	PLLEN = ON, INTOSC Frequency is 16 MHz (32x)
  1827     2007                     	org	8199
  1828     2007  3CF4               	dw	15604
  1829                           
  1830                           ;Config register CONFIG2 @ 0x2008
  1831                           ;	Flash memory self-write protection bits
  1832                           ;	WRTEN = OFF, Write protection off
  1833     2008                     	org	8200
  1834     2008  FFFF               	dw	65535

Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     31      68
    BANK1            80     54      54
    BANK2            80      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    S414$buffer	PTR unsigned char  size(1) Largest target is 0

    S414$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> main@buffer(BANK1[50]), 

    UARTSendString@str	PTR const unsigned char  size(1) Largest target is 50
		 -> main@buffer(BANK1[50]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwdiv
    _vfpfcnvrt->_fputc
    _UARTSendString->_UARTSendChar

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                57    57      0    2870
                                             28 BANK0      3     3      0
                                              0 BANK1     54    54      0
                     _UARTSendString
                            _initADC
                           _initUART
                            _readADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    16      5    2652
                                              9 BANK0     19    14      5
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    2344
                                             12 COMMON     2     0      2
                                              7 BANK0      2     2      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    2037
                                              8 COMMON     4     2      2
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTSendString                                       2     2      0     100
                                              1 COMMON     2     2      0
                       _UARTSendChar
 ---------------------------------------------------------------------------------
 (2) _UARTSendChar                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTSendString
     _UARTSendChar
   _initADC
   _initUART
   _readADC
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___lwdiv
         ___lwmod
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     1F      44       4       85.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50     36      36       6       67.5%
BANK2               50      0       0       7        0.0%
ABS                  0      0      88       8        0.0%
DATA                 0      0      88       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Mar 15 13:00:56 2025

                      pc 0002                       l33 069F                       l42 060F  
                     l51 059A                       l60 05B9                       l45 061A  
                     l54 05A4                       l39 058D                       l48 0598  
                     fsr 0004                      l344 0698                      l354 0654  
                    l527 05F3                      l800 063D                      l802 0643  
                    l810 06E9                      l571 05D6                      l804 064A  
                    l820 0725                      l812 06EE                      l564 07F5  
                    l900 05DA                      l806 0650                      l814 06F3  
                    l830 075A                      l902 05DE                      l583 073C  
                    l912 05A6                      l816 06F8                      l840 0795  
                    l832 0762                      l824 0740                      l904 05E0  
                    l920 0699                      l914 05A7                      l770 0667  
                    l762 0655                      l594 057C                      l818 0707  
                    l850 07CA                      l842 07A8                      l834 076C  
                    l826 074D                      l906 05E2                      l922 06B3  
                    l916 05AD                      l780 0687                      l772 066B  
                    l764 0657                      l844 07AE                      l836 077F  
                    l828 0753                      l860 07E2                      l908 05EA  
                    l924 06D3                      l918 05B1                      l782 068E  
                    l774 066F                      l766 065D                      l790 0621  
                    l846 07B4                      l838 0781                      l854 07D1  
                    l870 05BD                      l926 06D7                      l880 0585  
                    l776 0680                      l768 0660                      l784 0694  
                    l792 0624                      l848 07C4                      l856 07DA  
                    l872 05C0                      l866 059A                      l882 058E  
                    l890 05F5                      l778 0686                      l794 062B  
                    l874 05C8                      l868 05A0                      l884 0592  
                    l892 0603                      l796 062F                      l788 061B  
                    l876 05D4                      l886 0594                      l894 060C  
                    l798 0633                      l888 0595                      l896 0613  
                    u300 066F                      u301 066E                      u320 0680  
                    u400 0650                      u321 067F                      u401 064F  
                    u410 06EE                      u315 0670                      u411 06ED  
                    u500 05A0                      u340 0694                      u420 06F3  
                    u501 059F                      u341 0693                      u325 067C  
                    u421 06F2                      u350 0621                      u430 0707  
                    u510 05D4                      u335 0688                      u351 0620  
                    u431 0706                      u511 05D3                      u280 065D  
                    u440 0725                      u281 065C                      u441 0724  
                    u530 0613                      u370 0633                      u450 074D  
                    u531 0612                      u371 0632                      u451 074C  
                    u540 05B9                      u380 063D                      u460 076C  
                    u541 05B8                      u525 05F8                      u381 063C  
                    u365 0625                      u445 0721                      u461 076B  
                    u470 07AE                      u295 0661                      u471 07AD  
                    u480 07B3                      u385 0639                      u481 07B2  
                    u490 07D0                      u395 0644                      u491 07CF  
                    u557 06DF                      u567 0607                      fsr0 0004  
                    indf 0000                     STR_1 0008                     _dbuf 0020  
                   _main 0699                     _prec 0042                     btemp 007E  
                   start 0000                    ?_main 0070                    _ADRES 001E  
        __end_of___lwdiv 0699          __end_of___lwmod 0655             vfpfcnvrt@fmt 0078  
                  _SPBRG 0099                    _TXREG 0019          __end_of_initADC 058E  
        __end_of_readADC 061B                    _flags 0044                    _fputc 06E9  
                  _width 0040                    _putch 057C            main@adcValue1 00D2  
          main@adcValue2 00D4                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 05F4          __initialization 07F6  
           __end_of_main 06E9                   ??_main 0061                   _ADCON0 001F  
                 _ADCON1 009F                   ?_fputc 0070                   ?_putch 0070  
           vfprintf@cfmt 004D         __end_of_initUART 0599                ??___lwdiv 0074  
              ??___lwmod 0074                ??_initADC 0070                ??_readADC 0072  
                 fputc@c 0070                   putch@c 0070         __end_of_vfprintf 05D7  
              ??_sprintf 0053  __end_of__initialization 07FD           __pcstackCOMMON 0070  
          __end_of_fputc 073D            __end_of_putch 057D                  ??_fputc 0073  
                ??_putch 0070               __pbssBANK0 0020               __pmaintext 0699  
       UARTSendChar@data 0070               __stringtab 0002            ?_UARTSendChar 0070  
              ?_initUART 0070                  ___lwdiv 0655                  ___lwmod 061B  
              ?_vfprintf 007C           _UARTSendString 05A5                  __ptext1 05D7  
                __ptext2 05BA                  __ptext3 073D                  __ptext4 06E9  
                __ptext5 057C                  __ptext6 061B                  __ptext7 0655  
                __ptext8 05F4                  __ptext9 058E                  _initADC 0585  
                _readADC 05F4                  _sprintf 05D7                  clrloop0 057E  
   end_of_initialization 07FD           ??_UARTSendChar 0070               ??_initUART 0070  
                fputc@fp 0072        __end_of_vfpfcnvrt 07F6                _RCSTAbits 0018  
 __end_of_UARTSendString 05BA         vfpfcnvrt@convarg 0046               ??_vfprintf 007E  
             main@buffer 00A0                _TXSTAbits 0098          ?_UARTSendString 0070  
            vfpfcnvrt@ap 0079              vfpfcnvrt@cp 004A              vfpfcnvrt@fp 0045  
    start_initialization 07F6              vfprintf@fmt 007C     __end_of_UARTSendChar 05A5  
              ___latbits 0001            __pcstackBANK0 0045            __pcstackBANK1 00A0  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070                 ?___lwmod 0070  
              __pstrings 0002                 ?_initADC 0070                 ?_readADC 0070  
       ___lwdiv@quotient 0075                 ?_sprintf 004E                clear_ram0 057D  
               _GO_nDONE 00F9                _vfpfcnvrt 073D              __stringbase 0007  
             vfpfcnvrt@c 004B         ??_UARTSendString 0071               vfprintf@ap 007D  
             vfprintf@fp 004C               ?_vfpfcnvrt 0078           readADC@channel 0074  
     __end_of__stringtab 0008               sprintf@fmt 004E          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 __ptext10 0585                 __ptext11 05A5  
               __ptext12 0599                 _initUART 058E             _UARTSendChar 0599  
               _vfprintf 05BA        UARTSendString@str 0072                sprintf@ap 0054  
       ___lwmod@dividend 0072                stringcode 0002              ??_vfpfcnvrt 007A  
               sprintf@f 0056                 sprintf@s 0055          ___lwmod@divisor 0070  
        ___lwmod@counter 0075                 stringdir 0002                 stringtab 0002  
